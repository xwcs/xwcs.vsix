<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ include file="EF6.Utility.CS.ttinclude"#>
<#@ output extension=".cs"#>
<#
const string solutionDir = @"$solutiondirectory$";
const string rootname = @"$rootname$";
const string safeitemname = @"$safeitemname$";
const string rootnamespace = @"$rootnamespace$";
const string genTime = @"$time$";
const string genUserName = @"$username$";

const string inputFile = @"$InputFile$"; 
var textTransform = DynamicTextTransformation.Create(this);
var code = new CodeGenerationTools(this);
var ef = new MetadataTools(this);
var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
var itemCollection = new EdmMetadataLoader(textTransform.Host, textTransform.Errors).CreateEdmItemCollection(inputFile);
var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);

if (!typeMapper.VerifyCaseInsensitiveTypeUniqueness(typeMapper.GetAllGlobalItems(itemCollection), inputFile))
{
    return string.Empty;
}

WriteHeader(codeStringGenerator, fileManager);

foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{
    fileManager.StartNewFile(entity.Name + ".cs");
    BeginNamespace(code);

	var serializedProperties = typeMapper.GetSimpleProperties(entity);
	int serializedCount = 0;
	foreach (var edmProperty in serializedProperties)
    {
		string fName = code.Escape(edmProperty);	
		if(fName.EndsWith("_dump_xml")){
			++serializedCount;
		}
    }

#>
<#=codeStringGenerator.UsingDirectives(inHeader: false)#><#=
codeStringGenerator.EntityClassOpening(entity, serializedCount > 0)
#>
	{<#
    var propertiesWithDefaultValues = typeMapper.GetPropertiesWithDefaultValues(entity);
    var collectionNavigationProperties = typeMapper.GetCollectionNavigationProperties(entity);
    var complexProperties = typeMapper.GetComplexProperties(entity);
	

	//we need default ctr anyway
    //if (propertiesWithDefaultValues.Any() || collectionNavigationProperties.Any() || complexProperties.Any())
    //{
#>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
		public <#=code.Escape(entity)#>()
		{<#	
        foreach (var edmProperty in propertiesWithDefaultValues)
        {#>
			this.<#=code.Escape(edmProperty)#> = <#=typeMapper.CreateLiteral(edmProperty.DefaultValue)#>;<#
        }

        foreach (var navigationProperty in collectionNavigationProperties)
        {#>
			this.<#=code.Escape(navigationProperty)#> = new HashSet<<#=typeMapper.GetTypeName(navigationProperty.ToEndMember.GetEntityType())#>>();<#
        }

        foreach (var complexProperty in complexProperties)
        {#>
			this.<#=code.Escape(complexProperty)#> = new <#=typeMapper.GetTypeName(complexProperty.TypeUsage)#>();
<#
        }
#>
		}

	<#
	if(serializedCount > 0){	
	#>
		public override void GetMutablePropertiesType(Dictionary<string, Type> dest) {
	<#	
		foreach (var edmProperty in serializedProperties)
		{
			string fName = code.Escape(edmProperty);	
			if(fName.EndsWith("_dump_xml")){
				string oName = Char.ToLowerInvariant(fName[0]) + fName.Substring(1) + "_obj";
				#><#=string.Format("\t\tdest.Add(\"{0}\", _{0} != null ? _{0}.GetType() : typeof(object));\r\n", oName)
				#><#
			}
		}			
	#>
		}	
	<#="\r\n"#><#
	}	


    var simpleProperties = typeMapper.GetSimpleProperties(entity);
    if (simpleProperties.Any())
    {
        foreach (var edmProperty in simpleProperties)
        {#>
		<#=codeStringGenerator.Property(edmProperty)#><#
        }
    }

    if (complexProperties.Any())
    {#>
<#
        foreach(var complexProperty in complexProperties)
        {#>
		<#=codeStringGenerator.Property(complexProperty)#>
<#
        }
    }
#>
<#=codeStringGenerator.GetSerialization()#>
<#
    var navigationProperties = typeMapper.GetNavigationProperties(entity);
    if (navigationProperties.Any())
    {#>
<#
        foreach (var navigationProperty in navigationProperties)
        {
            if (navigationProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
            {#>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
<#
            }#>
		<#=codeStringGenerator.NavigationProperty(navigationProperty)#><#
        }
    }#>
	}
<#
    EndNamespace(code);
}


/* meta.cs */
foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{
	var path = System.IO.Path.GetDirectoryName(this.Host.TemplateFile);
	path = System.IO.Path.Combine(path, entity.Name + ".meta.cs");

	fileManager.StartNewFile(entity.Name + ".meta.cs");	
	
	// now only create the file, if it does not exist yet
    if (!System.IO.File.Exists(path)) 
	{
		
		BeginNamespace(code);
#>

<#=codeStringGenerator.UsingDirectives(inHeader: false)#>
	// This class is just for meta attributes editing
	// Do not write any logic here, it will be not considered
	// Copy this class somewhere else this one will be overridden!!!

	<#=codeStringGenerator.EntityClassOpeningMeta(entity)#>
	{<#
		var propertiesWithDefaultValues = typeMapper.GetPropertiesWithDefaultValues(entity);
		var collectionNavigationProperties = typeMapper.GetCollectionNavigationProperties(entity);
		var complexProperties = typeMapper.GetComplexProperties(entity);

   

		var simpleProperties = typeMapper.GetSimpleProperties(entity);
		if (simpleProperties.Any())
		{
			foreach (var edmProperty in simpleProperties)
			{#>
		<#=codeStringGenerator.PropertyMeta(edmProperty)#><#
			}
		}

		var navigationProperties = typeMapper.GetNavigationProperties(entity);
		if (navigationProperties.Any())
		{#><#
			foreach (var navigationProperty in navigationProperties)
			{#>
		[Display(AutoGenerateField=false)]
		<#=codeStringGenerator.NavigationProperty(navigationProperty)#><#
			}
		}#>
	}


	// This class couple its entity and it should be use
	// for extending functionalities of Entity class
	// here can be add de-serialized complex fields
	// or other necessary logic
	// copy this class to some other place
	// changes in this place will be overridden !!!

	[MetadataType(typeof(<#=code.Escape(entity)#>_meta))]
	public partial class <#=code.Escape(entity)#>
	{
		// custom implementations
	}<# 
		EndNamespace(code);

	}else{
		//file exists so read it from disk
		 IEnumerable<string> readText = File.ReadLines(path);
		 bool starting = true;
		 foreach(string line in readText){
			if(!(starting && (line.Length == 0 || (line.Length > 0 && line[0] == '/')))){
				starting = false; //first correct line comments remain good
				#><#=line + "\r\n"#><#
			}
		 }
	} // end IF file exists
}

foreach (var complex in typeMapper.GetItemsToGenerate<ComplexType>(itemCollection))
{
    fileManager.StartNewFile(complex.Name + ".cs");
    BeginNamespace(code);
#>
<#=codeStringGenerator.UsingDirectives(inHeader: false, includeCollections: false)#>
<#=Accessibility.ForType(complex)#> partial class <#=code.Escape(complex)#> : EntityBase
{
<#
    var complexProperties = typeMapper.GetComplexProperties(complex);
    var propertiesWithDefaultValues = typeMapper.GetPropertiesWithDefaultValues(complex);

    if (propertiesWithDefaultValues.Any() || complexProperties.Any())
    {
#>
    public <#=code.Escape(complex)#>()
    {
<#
        foreach (var edmProperty in propertiesWithDefaultValues)
        {
#>
        this.<#=code.Escape(edmProperty)#> = <#=typeMapper.CreateLiteral(edmProperty.DefaultValue)#>;
<#
        }

        foreach (var complexProperty in complexProperties)
        {
#>
        this.<#=code.Escape(complexProperty)#> = new <#=typeMapper.GetTypeName(complexProperty.TypeUsage)#>();
<#
        }
#>
    }

<#
    }

    var simpleProperties = typeMapper.GetSimpleProperties(complex);
    if (simpleProperties.Any())
    {
        foreach(var edmProperty in simpleProperties)
        {
#>
    <#=codeStringGenerator.Property(edmProperty)#>
<#
        }
    }

    if (complexProperties.Any())
    {
#>

<#
        foreach(var edmProperty in complexProperties)
        {
#>
    <#=codeStringGenerator.Property(edmProperty)#>
<#
        }
    }
#>
}
<#
    EndNamespace(code);
}

foreach (var enumType in typeMapper.GetEnumItemsToGenerate(itemCollection))
{
    fileManager.StartNewFile(enumType.Name + ".cs");
    BeginNamespace(code);
#>
<#=codeStringGenerator.UsingDirectives(inHeader: false, includeCollections: false)#>
<#
    if (typeMapper.EnumIsFlags(enumType))
    {
#>
[Flags]
<#
    }
#>
<#=codeStringGenerator.EnumOpening(enumType)#>
{
<#
    var foundOne = false;
    
    foreach (MetadataItem member in typeMapper.GetEnumMembers(enumType))
    {
        foundOne = true;
#>
    <#=code.Escape(typeMapper.GetEnumMemberName(member))#> = <#=typeMapper.GetEnumMemberValue(member)#>,
<#
    }

    if (foundOne)
    {
        this.GenerationEnvironment.Remove(this.GenerationEnvironment.Length - 3, 1);
    }
#>
}
<#
    EndNamespace(code);
}

fileManager.Process();

#>
<#+

public void WriteHeader(CodeStringGenerator codeStringGenerator, EntityFrameworkTemplateFileManager fileManager)
{
    fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
// By: <#=genUserName#>
// At: <#=genTime#>
// </auto-generated>
//------------------------------------------------------------------------------
<#=codeStringGenerator.UsingDirectives(inHeader: true)#>
<#+
    fileManager.EndBlock();
}

public void BeginNamespace(CodeGenerationTools code)
{
    var codeNamespace = code.VsNamespaceSuggestion();
    if (!String.IsNullOrEmpty(codeNamespace))
    {
#>
namespace <#=code.EscapeNamespace(codeNamespace)#>
{
<#+
        PushIndent("    ");
    }
}

public void EndNamespace(CodeGenerationTools code)
{
    if (!String.IsNullOrEmpty(code.VsNamespaceSuggestion()))
    {
        PopIndent();
#>
}
<#+
    }
}

public const string TemplateId = "CSharp_DbContext_Types_EF6";

public class CodeStringGenerator
{
    private readonly CodeGenerationTools _code;
    private readonly TypeMapper _typeMapper;
    private readonly MetadataTools _ef;

	private List<string> _serialized = new List<string>();

	

    public CodeStringGenerator(CodeGenerationTools code, TypeMapper typeMapper, MetadataTools ef)
    {
        ArgumentNotNull(code, "code");
        ArgumentNotNull(typeMapper, "typeMapper");
        ArgumentNotNull(ef, "ef");

        _code = code;
        _typeMapper = typeMapper;
        _ef = ef;
    }

	public string GetSerialization(){
		
		if(_serialized.Count > 0){
			string ret = "\t\tpublic override void DeserializeFields(){\r\n\t\tobject o;\r\n";
			string ret1 = "\tpublic override void SerializeFields(){\r\n\t\tstring s;\r\n";
			foreach(string s in _serialized){
				ret += string.Format("\t\to = {0}_obj;\r\n", s);
				ret1 += string.Format("\t\ts = {0};\r\n", s);
			}

			//reset used fileds
			_serialized.Clear();
			return string.Format("{0}\t}} \r\n {1}\t}}", ret, ret1);
		}		
		return "";
	}

    public string Property(EdmProperty edmProperty)
	{
		// here we decide what to do
		// it is not performance wise to use getter as function if we need
		// just few fields with effective deserialisation
		// so we decide convention, all serialized content must have field name
		// suffix "_dump_xml" example : <field>_dump_xml
		// so we can apply deserialisation routine just for this field
		// we will create also its complex brother with more one suffix "_obj"
		
		string suffix = "_dump_xml";
		string fName = _code.Escape(edmProperty);

		// make private name
		string fPrivateName = Char.ToLowerInvariant(fName[0]) + fName.Substring(1);
		if(fPrivateName[0] ==  '@'){
			fPrivateName = "@_" + fPrivateName.Substring(1);
		}else{
			fPrivateName = "_" + fPrivateName;
		}

		if(fName.EndsWith(suffix)){
			string fType = _typeMapper.GetTypeName(edmProperty.TypeUsage);

			if(fType != "string"){
				return string.Format("Field {0} must be a string!", fName);
			}
			string brotherName = fName + "_obj";

			string fPrivateBName = Char.ToLowerInvariant(brotherName[0]) + brotherName.Substring(1);
			if(fPrivateBName[0] ==  '@'){
				fPrivateBName = "@_" + fPrivateBName.Substring(1);
			}else{
				fPrivateBName = "_" + fPrivateBName;
			}

			//save for later
			_serialized.Add(fName);

			return string.Format(
			CultureInfo.InvariantCulture,
			"private {1} {3};\r\n"+
			"\t{0} {1} {2} \r\n" +
			"\t{{ \r\n" +
				"\t\t{4}get {{ return SerializeAndGet({6}, ref {3}); }} \r\n" +
				"\t\t{5}set {{ SetProperty(ref {3}, value); }} \r\n" + 
			"\t}}\r\n\r\n" + 
			"\tprivate object {6} = null;\r\n"+
			"\t[NotMapped]\r\n"+
			"\t[Mutable]\r\n"+
			"\t{0} object {7} \r\n" +
			"\t{{ \r\n" +
				"\t\t{4}get {{ return GetOrDeserialize({3}, \"{2}\", ref {6}); }} \r\n" +
				"\t\t{5}set {{ SetProperty(ref {6}, value); }} \r\n" + 
			"\t}}\r\n",
			Accessibility.ForProperty(edmProperty),
			fType,
			fName,
			fPrivateName,
			_code.SpaceAfter(Accessibility.ForGetter(edmProperty)),
			_code.SpaceAfter(Accessibility.ForSetter(edmProperty)),
			fPrivateBName,
			brotherName
			);
		}else{
			
			return string.Format(
			CultureInfo.InvariantCulture,
			"private {1} {3};\r\n"+
			"\t{0} {1} {2} \r\n" +
			"\t{{ \r\n" +
				"\t\t{4}get {{ return {3}; }} \r\n" +
				"\t\t{5}set {{ SetProperty(ref {3}, value); }} \r\n" + 
			"\t}}\r\n",
			Accessibility.ForProperty(edmProperty),
			_typeMapper.GetTypeName(edmProperty.TypeUsage),
			fName,
			fPrivateName,
			_code.SpaceAfter(Accessibility.ForGetter(edmProperty)),
			_code.SpaceAfter(Accessibility.ForSetter(edmProperty)));
		}		
	}

	public string PropertyMeta(EdmProperty edmProperty)
	{
		string suffix = "_dump_xml";
		string fName = _code.Escape(edmProperty);
		if(fName.EndsWith(suffix)){
			string fType = _typeMapper.GetTypeName(edmProperty.TypeUsage);

			if(fType != "string"){
				return string.Format("Field {0} must be a string!", fName);
			}
			string brotherName = fName + "_obj";

				return string.Format(
				CultureInfo.InvariantCulture,
				"[Display({5}{6})]\r\n"+
				"\t{0} {1} {2} {{ {3}get; {4}set;}}\r\n"+
				"\r\n\t"+
				"[Display({7})]\r\n"+
				"\t{0} object {8} {{ {3}get; {4}set;}}\r\n",
				Accessibility.ForProperty(edmProperty),
				_typeMapper.GetTypeName(edmProperty.TypeUsage),
				_code.Escape(edmProperty),
				_code.SpaceAfter(Accessibility.ForGetter(edmProperty)),
				_code.SpaceAfter(Accessibility.ForSetter(edmProperty)),
				"Name=\"" + Char.ToUpperInvariant(_code.Escape(edmProperty)[0]) + _code.Escape(edmProperty).Substring(1) + "\"",
				", AutoGenerateField=false",
				"Name=\"" + Char.ToUpperInvariant(brotherName[0]) + brotherName.Substring(1) + "\"",
				brotherName
			);
		}else{


			return string.Format(
				CultureInfo.InvariantCulture,
				"[Display({5}{6})]\r\n"+
				"{7}"+ 
				"\t{0} {1} {2} {{ {3}get; {4}set;}}\r\n",
				Accessibility.ForProperty(edmProperty),
				_typeMapper.GetTypeName(edmProperty.TypeUsage),
				_code.Escape(edmProperty),
				_code.SpaceAfter(Accessibility.ForGetter(edmProperty)),
				_code.SpaceAfter(Accessibility.ForSetter(edmProperty)),
				_code.Escape(edmProperty) != "rowversion" ? "Name=\"" + Char.ToUpperInvariant(_code.Escape(edmProperty)[0]) + _code.Escape(edmProperty).Substring(1) + "\"" : "",
				_code.Escape(edmProperty) == "rowversion" ? "AutoGenerateField=false" : "",
				_code.Escape(edmProperty) == "rowversion" ? "\t[ConcurrencyCheck]\r\n" : ""
			);
		}
	}

    public string NavigationProperty(NavigationProperty navProp)
    {
        var endType = _typeMapper.GetTypeName(navProp.ToEndMember.GetEntityType());
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} {1} {2} {{ {3}get; {4}set; }}",
            AccessibilityAndVirtual(Accessibility.ForNavigationProperty(navProp)),
            navProp.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many ? ("ICollection<" + endType + ">") : endType,
            _code.Escape(navProp),
            _code.SpaceAfter(Accessibility.ForGetter(navProp)),
            _code.SpaceAfter(Accessibility.ForSetter(navProp)));
    }
    
    public string AccessibilityAndVirtual(string accessibility)
    {
        return accessibility + (accessibility != "private" ? " virtual" : "");
    }
    
    public string EntityClassOpening(EntityType entity, bool serialized = false)
    {
         return string.Format(
			CultureInfo.InvariantCulture,
			"\r\n{0} {1}partial class {2}{3}",
			Accessibility.ForType(entity),
			_code.SpaceAfter(_code.AbstractOption(entity)),
			_code.Escape(entity),
			_code.StringBefore(" : ", string.IsNullOrEmpty(_typeMapper.GetTypeName(entity.BaseType)) ? (serialized ? "Serialized" : "" ) + "EntityBase" : _typeMapper.GetTypeName(entity.BaseType)));
    }
	
	public string EntityClassOpeningMeta(EntityType entity) 
    {
         return string.Format(
			CultureInfo.InvariantCulture,
			"{0} {1}class {2}",
			Accessibility.ForType(entity),
			_code.SpaceAfter(_code.AbstractOption(entity)),
			_code.Escape(entity) + "_meta");
    }
    
    public string EnumOpening(SimpleType enumType)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} enum {1} : {2}",
            Accessibility.ForType(enumType),
            _code.Escape(enumType),
            _code.Escape(_typeMapper.UnderlyingClrType(enumType)));
        }
    
    public void WriteFunctionParameters(EdmFunction edmFunction, Action<string, string, string, string> writeParameter)
    {
        var parameters = FunctionImportParameter.Create(edmFunction.Parameters, _code, _ef);
        foreach (var parameter in parameters.Where(p => p.NeedsLocalVariable))
        {
            var isNotNull = parameter.IsNullableOfT ? parameter.FunctionParameterName + ".HasValue" : parameter.FunctionParameterName + " != null";
            var notNullInit = "new ObjectParameter(\"" + parameter.EsqlParameterName + "\", " + parameter.FunctionParameterName + ")";
            var nullInit = "new ObjectParameter(\"" + parameter.EsqlParameterName + "\", typeof(" + TypeMapper.FixNamespaces(parameter.RawClrTypeName) + "))";
            writeParameter(parameter.LocalVariableName, isNotNull, notNullInit, nullInit);
        }
    }
    
    public string ComposableFunctionMethod(EdmFunction edmFunction, string modelNamespace)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} IQueryable<{1}> {2}({3})",
            AccessibilityAndVirtual(Accessibility.ForMethod(edmFunction)),
            _typeMapper.GetTypeName(_typeMapper.GetReturnType(edmFunction), modelNamespace),
            _code.Escape(edmFunction),
            string.Join(", ", parameters.Select(p => TypeMapper.FixNamespaces(p.FunctionParameterType) + " " + p.FunctionParameterName).ToArray()));
    }
    
    public string ComposableCreateQuery(EdmFunction edmFunction, string modelNamespace)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        
        return string.Format(
            CultureInfo.InvariantCulture,
            "return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<{0}>(\"[{1}].[{2}]({3})\"{4});",
            _typeMapper.GetTypeName(_typeMapper.GetReturnType(edmFunction), modelNamespace),
            edmFunction.NamespaceName,
            edmFunction.Name,
            string.Join(", ", parameters.Select(p => "@" + p.EsqlParameterName).ToArray()),
            _code.StringBefore(", ", string.Join(", ", parameters.Select(p => p.ExecuteParameterName).ToArray())));
    }
    
    public string FunctionMethod(EdmFunction edmFunction, string modelNamespace, bool includeMergeOption)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        var returnType = _typeMapper.GetReturnType(edmFunction);

        var paramList = String.Join(", ", parameters.Select(p => TypeMapper.FixNamespaces(p.FunctionParameterType) + " " + p.FunctionParameterName).ToArray());
        if (includeMergeOption)
        {
            paramList = _code.StringAfter(paramList, ", ") + "MergeOption mergeOption";
        }

        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} {1} {2}({3})",
            AccessibilityAndVirtual(Accessibility.ForMethod(edmFunction)),
            returnType == null ? "int" : "ObjectResult<" + _typeMapper.GetTypeName(returnType, modelNamespace) + ">",
            _code.Escape(edmFunction),
            paramList);
    }
    
    public string ExecuteFunction(EdmFunction edmFunction, string modelNamespace, bool includeMergeOption)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        var returnType = _typeMapper.GetReturnType(edmFunction);

        var callParams = _code.StringBefore(", ", String.Join(", ", parameters.Select(p => p.ExecuteParameterName).ToArray()));
        if (includeMergeOption)
        {
            callParams = ", mergeOption" + callParams;
        }
        
        return string.Format(
            CultureInfo.InvariantCulture,
            "return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction{0}(\"{1}\"{2});",
            returnType == null ? "" : "<" + _typeMapper.GetTypeName(returnType, modelNamespace) + ">",
            edmFunction.Name,
            callParams);
    }
    
    public string DbSet(EntitySet entitySet)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} virtual DbSet<{1}> {2} {{ get; set; }}",
            Accessibility.ForReadOnlyProperty(entitySet),
            _typeMapper.GetTypeName(entitySet.ElementType),
            _code.Escape(entitySet));
    }

    public string UsingDirectives(bool inHeader, bool includeCollections = true)
    {
        return inHeader == string.IsNullOrEmpty(_code.VsNamespaceSuggestion())
            ? string.Format(
                CultureInfo.InvariantCulture,
                "{0}using System;{1}" +
                "{2}" +
				"using System.ComponentModel.DataAnnotations;\r\n"+
				"using System.ComponentModel.DataAnnotations.Schema;\r\n"+
				"using xwcs.core.db;\r\n"+
				"using xwcs.core.db.binding.attributes;\r\n"+
				"using xwcs.core.db.model.attributes;{2}",
                inHeader ? Environment.NewLine : "\t",
                includeCollections ? (Environment.NewLine + "using System.Collections.Generic;") : "",
                inHeader ? "" : Environment.NewLine)
            : "";
    }
}

public class TypeMapper
{
    private const string ExternalTypeNameAttributeName = @"http://schemas.microsoft.com/ado/2006/04/codegeneration:ExternalTypeName";

    private readonly System.Collections.IList _errors;
    private readonly CodeGenerationTools _code;
    private readonly MetadataTools _ef;

    public TypeMapper(CodeGenerationTools code, MetadataTools ef, System.Collections.IList errors)
    {
        ArgumentNotNull(code, "code");
        ArgumentNotNull(ef, "ef");
        ArgumentNotNull(errors, "errors");

        _code = code;
        _ef = ef;
        _errors = errors;
    }

    public static string FixNamespaces(string typeName)
    {
        return typeName.Replace("System.Data.Spatial.", "System.Data.Entity.Spatial.");
    }

    public string GetTypeName(TypeUsage typeUsage)
    {
        return typeUsage == null ? null : GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace: null);
    }

    public string GetTypeName(EdmType edmType)
    {
        return GetTypeName(edmType, isNullable: null, modelNamespace: null);
    }

    public string GetTypeName(TypeUsage typeUsage, string modelNamespace)
    {
        return typeUsage == null ? null : GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace);
    }

    public string GetTypeName(EdmType edmType, string modelNamespace)
    {
        return GetTypeName(edmType, isNullable: null, modelNamespace: modelNamespace);
    }

    public string GetTypeName(EdmType edmType, bool? isNullable, string modelNamespace)
    {
        if (edmType == null)
        {
            return null;
        }

        var collectionType = edmType as CollectionType;
        if (collectionType != null)
        {
            return String.Format(CultureInfo.InvariantCulture, "ICollection<{0}>", GetTypeName(collectionType.TypeUsage, modelNamespace));
        }

        var typeName = _code.Escape(edmType.MetadataProperties
                                .Where(p => p.Name == ExternalTypeNameAttributeName)
                                .Select(p => (string)p.Value)
                                .FirstOrDefault())
            ?? (modelNamespace != null && edmType.NamespaceName != modelNamespace ?
                _code.CreateFullName(_code.EscapeNamespace(edmType.NamespaceName), _code.Escape(edmType)) :
                _code.Escape(edmType));

        if (edmType is StructuralType)
        {
            return typeName;
        }

        if (edmType is SimpleType)
        {
            var clrType = UnderlyingClrType(edmType);
            if (!IsEnumType(edmType))
            {
                typeName = _code.Escape(clrType);
            }

            typeName = FixNamespaces(typeName);

            return clrType.IsValueType && isNullable == true ?
                String.Format(CultureInfo.InvariantCulture, "Nullable<{0}>", typeName) :
                typeName;
        }

        throw new ArgumentException("edmType");
    }
    
    public Type UnderlyingClrType(EdmType edmType)
    {
        ArgumentNotNull(edmType, "edmType");

        var primitiveType = edmType as PrimitiveType;
        if (primitiveType != null)
        {
            return primitiveType.ClrEquivalentType;
        }

        if (IsEnumType(edmType))
        {
            return GetEnumUnderlyingType(edmType).ClrEquivalentType;
        }

        return typeof(object);
    }
    
    public object GetEnumMemberValue(MetadataItem enumMember)
    {
        ArgumentNotNull(enumMember, "enumMember");
        
        var valueProperty = enumMember.GetType().GetProperty("Value");
        return valueProperty == null ? null : valueProperty.GetValue(enumMember, null);
    }
    
    public string GetEnumMemberName(MetadataItem enumMember)
    {
        ArgumentNotNull(enumMember, "enumMember");
        
        var nameProperty = enumMember.GetType().GetProperty("Name");
        return nameProperty == null ? null : (string)nameProperty.GetValue(enumMember, null);
    }

    public System.Collections.IEnumerable GetEnumMembers(EdmType enumType)
    {
        ArgumentNotNull(enumType, "enumType");

        var membersProperty = enumType.GetType().GetProperty("Members");
        return membersProperty != null 
            ? (System.Collections.IEnumerable)membersProperty.GetValue(enumType, null)
            : Enumerable.Empty<MetadataItem>();
    }
    
    public bool EnumIsFlags(EdmType enumType)
    {
        ArgumentNotNull(enumType, "enumType");
        
        var isFlagsProperty = enumType.GetType().GetProperty("IsFlags");
        return isFlagsProperty != null && (bool)isFlagsProperty.GetValue(enumType, null);
    }

    public bool IsEnumType(GlobalItem edmType)
    {
        ArgumentNotNull(edmType, "edmType");

        return edmType.GetType().Name == "EnumType";
    }

    public PrimitiveType GetEnumUnderlyingType(EdmType enumType)
    {
        ArgumentNotNull(enumType, "enumType");

        return (PrimitiveType)enumType.GetType().GetProperty("UnderlyingType").GetValue(enumType, null);
    }

    public string CreateLiteral(object value)
    {
        if (value == null || value.GetType() != typeof(TimeSpan))
        {
            return _code.CreateLiteral(value);
        }

        return string.Format(CultureInfo.InvariantCulture, "new TimeSpan({0})", ((TimeSpan)value).Ticks);
    }
    
    public bool VerifyCaseInsensitiveTypeUniqueness(IEnumerable<string> types, string sourceFile)
    {
        ArgumentNotNull(types, "types");
        ArgumentNotNull(sourceFile, "sourceFile");
        
        var hash = new HashSet<string>(StringComparer.InvariantCultureIgnoreCase);
        if (types.Any(item => !hash.Add(item)))
        {
            _errors.Add(
                new CompilerError(sourceFile, -1, -1, "6023",
                    String.Format(CultureInfo.CurrentCulture, CodeGenerationTools.GetResourceString("Template_CaseInsensitiveTypeConflict"))));
            return false;
        }
        return true;
    }
    
    public IEnumerable<SimpleType> GetEnumItemsToGenerate(IEnumerable<GlobalItem> itemCollection)
    {
        return GetItemsToGenerate<SimpleType>(itemCollection)
            .Where(e => IsEnumType(e));
    }
    
    public IEnumerable<T> GetItemsToGenerate<T>(IEnumerable<GlobalItem> itemCollection) where T: EdmType
    {
        return itemCollection
            .OfType<T>()
            .Where(i => !i.MetadataProperties.Any(p => p.Name == ExternalTypeNameAttributeName))
            .OrderBy(i => i.Name);
    }

    public IEnumerable<string> GetAllGlobalItems(IEnumerable<GlobalItem> itemCollection)
    {
        return itemCollection
            .Where(i => i is EntityType || i is ComplexType || i is EntityContainer || IsEnumType(i))
            .Select(g => GetGlobalItemName(g));
    }

    public string GetGlobalItemName(GlobalItem item)
    {
        if (item is EdmType)
        {
            return ((EdmType)item).Name;
        }
        else
        {
            return ((EntityContainer)item).Name;
        }
    }

	public IEnumerable<EdmProperty> GetSerializedProperties(EntityType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type
			&& GetGlobalItemName(p.TypeUsage.EdmType).EndsWith("_dump_xml")
		);
    }

    public IEnumerable<EdmProperty> GetSimpleProperties(EntityType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type);
    }
    
    public IEnumerable<EdmProperty> GetSimpleProperties(ComplexType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type);
    }
    
    public IEnumerable<EdmProperty> GetComplexProperties(EntityType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is ComplexType && p.DeclaringType == type);
    }
    
    public IEnumerable<EdmProperty> GetComplexProperties(ComplexType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is ComplexType && p.DeclaringType == type);
    }

    public IEnumerable<EdmProperty> GetPropertiesWithDefaultValues(EntityType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type && p.DefaultValue != null);
    }
    
    public IEnumerable<EdmProperty> GetPropertiesWithDefaultValues(ComplexType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type && p.DefaultValue != null);
    }

    public IEnumerable<NavigationProperty> GetNavigationProperties(EntityType type)
    {
        return type.NavigationProperties.Where(np => np.DeclaringType == type);
    }
    
    public IEnumerable<NavigationProperty> GetCollectionNavigationProperties(EntityType type)
    {
        return type.NavigationProperties.Where(np => np.DeclaringType == type && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many);
    }
    
    public FunctionParameter GetReturnParameter(EdmFunction edmFunction)
    {
        ArgumentNotNull(edmFunction, "edmFunction");

        var returnParamsProperty = edmFunction.GetType().GetProperty("ReturnParameters");
        return returnParamsProperty == null
            ? edmFunction.ReturnParameter
            : ((IEnumerable<FunctionParameter>)returnParamsProperty.GetValue(edmFunction, null)).FirstOrDefault();
    }

    public bool IsComposable(EdmFunction edmFunction)
    {
        ArgumentNotNull(edmFunction, "edmFunction");

        var isComposableProperty = edmFunction.GetType().GetProperty("IsComposableAttribute");
        return isComposableProperty != null && (bool)isComposableProperty.GetValue(edmFunction, null);
    }

    public IEnumerable<FunctionImportParameter> GetParameters(EdmFunction edmFunction)
    {
        return FunctionImportParameter.Create(edmFunction.Parameters, _code, _ef);
    }

    public TypeUsage GetReturnType(EdmFunction edmFunction)
    {
        var returnParam = GetReturnParameter(edmFunction);
        return returnParam == null ? null : _ef.GetElementType(returnParam.TypeUsage);
    }
    
    public bool GenerateMergeOptionFunction(EdmFunction edmFunction, bool includeMergeOption)
    {
        var returnType = GetReturnType(edmFunction);
        return !includeMergeOption && returnType != null && returnType.EdmType.BuiltInTypeKind == BuiltInTypeKind.EntityType;
    }
}

public static void ArgumentNotNull<T>(T arg, string name) where T : class
{
    if (arg == null)
    {
        throw new ArgumentNullException(name);
    }
}
#>